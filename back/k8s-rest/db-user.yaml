apiVersion: apps/v1
kind: Deployment
metadata: { name: postgres-user-deployment }
spec:
  replicas: 1
  selector: { matchLabels: { app: postgres-user } }
  template:
    metadata: { labels: { app: postgres-user } }
    spec:
      securityContext: { fsGroup: 999 }
      initContainers:
        - name: postgres-init
          image: busybox:1.36
          command: ['sh','-c','chmod 700 /var/lib/postgresql/data && chown -R 999:999 /var/lib/postgresql/data']
          volumeMounts: [ { name: data, mountPath: /var/lib/postgresql/data } ]
      containers:
        - name: postgres
          image: postgres:15
          ports: [{ containerPort: 5432 }]
          env:
            - { name: POSTGRES_USER, value: "postgres" }
            - { name: POSTGRES_PASSWORD, value: "postgres" }
            - { name: POSTGRES_DB, value: "dbspringboot" }
          securityContext: { runAsUser: 999, runAsNonRoot: true }
          volumeMounts: [ { name: data, mountPath: /var/lib/postgresql/data } ]
          readinessProbe: { exec: { command: ["sh","-c","pg_isready -p 5432"] }, initialDelaySeconds: 5, periodSeconds: 5 }
      volumes: [ { name: data, emptyDir: {} } ]
---
apiVersion: v1
kind: Service
metadata: { name: postgres-user-service }
spec:
  selector: { app: postgres-user }
  ports: [ { protocol: TCP, port: 5432, targetPort: 5432 } ]
  type: ClusterIP
