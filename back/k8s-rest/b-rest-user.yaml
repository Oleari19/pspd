apiVersion: apps/v1
kind: Deployment
metadata: { name: rest-user-deployment }
spec:
  replicas: 1
  selector: { matchLabels: { app: rest-user } }
  template:
    metadata: { labels: { app: rest-user } }
    spec:
      containers:
        - name: rest-user
          image: rest-user:v1            # pode ser a MESMA imagem do rest-quiz (Spring)
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 8089 }]
          env:
            - { name: PORT,        value: "8089" }
            - { name: PGHOST,      value: "postgres-user-service" }
            - { name: PGPORT,      value: "5432" }
            - { name: PGDATABASE,  value: "dbspringboot" }
            - { name: PGUSER,      value: "postgres" }
            - { name: PGPASSWORD,  value: "postgres" }
          readinessProbe: { httpGet: { path: "/actuator/health", port: 8089 }, initialDelaySeconds: 5, periodSeconds: 5 }
          livenessProbe:  { httpGet: { path: "/actuator/health", port: 8089 }, initialDelaySeconds: 10, periodSeconds: 10 }
---
apiVersion: v1
kind: Service
metadata: { name: rest-user-service }
spec:
  selector: { app: rest-user }
  ports: [ { protocol: TCP, port: 8089, targetPort: 8089 } ]
  type: ClusterIP
