// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user.proto

#include "user.pb.h"
#include "user.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace user {

static const char* User_method_names[] = {
  "/user.User/CreateUsuario",
  "/user.User/UpdateScore",
  "/user.User/Login",
  "/user.User/ListByScore",
};

std::unique_ptr< User::Stub> User::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< User::Stub> stub(new User::Stub(channel, options));
  return stub;
}

User::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateUsuario_(User_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateScore_(User_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(User_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListByScore_(User_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status User::Stub::CreateUsuario(::grpc::ClientContext* context, const ::user::CreateUserRequest& request, ::user::CreateUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::CreateUserRequest, ::user::CreateUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateUsuario_, context, request, response);
}

void User::Stub::async::CreateUsuario(::grpc::ClientContext* context, const ::user::CreateUserRequest* request, ::user::CreateUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::CreateUserRequest, ::user::CreateUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUsuario_, context, request, response, std::move(f));
}

void User::Stub::async::CreateUsuario(::grpc::ClientContext* context, const ::user::CreateUserRequest* request, ::user::CreateUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUsuario_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::CreateUserResponse>* User::Stub::PrepareAsyncCreateUsuarioRaw(::grpc::ClientContext* context, const ::user::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::CreateUserResponse, ::user::CreateUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateUsuario_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::CreateUserResponse>* User::Stub::AsyncCreateUsuarioRaw(::grpc::ClientContext* context, const ::user::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateUsuarioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::UpdateScore(::grpc::ClientContext* context, const ::user::ScoreRequest& request, ::user::ScoreResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::ScoreRequest, ::user::ScoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateScore_, context, request, response);
}

void User::Stub::async::UpdateScore(::grpc::ClientContext* context, const ::user::ScoreRequest* request, ::user::ScoreResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::ScoreRequest, ::user::ScoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateScore_, context, request, response, std::move(f));
}

void User::Stub::async::UpdateScore(::grpc::ClientContext* context, const ::user::ScoreRequest* request, ::user::ScoreResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateScore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::ScoreResponse>* User::Stub::PrepareAsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::user::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::ScoreResponse, ::user::ScoreRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateScore_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::ScoreResponse>* User::Stub::AsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::user::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateScoreRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Login(::grpc::ClientContext* context, const ::user::LoginRequest& request, ::user::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::LoginRequest, ::user::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void User::Stub::async::Login(::grpc::ClientContext* context, const ::user::LoginRequest* request, ::user::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::LoginRequest, ::user::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void User::Stub::async::Login(::grpc::ClientContext* context, const ::user::LoginRequest* request, ::user::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::LoginResponse>* User::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::user::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::LoginResponse, ::user::LoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::LoginResponse>* User::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::user::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ListByScore(::grpc::ClientContext* context, const ::user::ListRequest& request, ::user::ListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::ListRequest, ::user::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListByScore_, context, request, response);
}

void User::Stub::async::ListByScore(::grpc::ClientContext* context, const ::user::ListRequest* request, ::user::ListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::ListRequest, ::user::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListByScore_, context, request, response, std::move(f));
}

void User::Stub::async::ListByScore(::grpc::ClientContext* context, const ::user::ListRequest* request, ::user::ListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListByScore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::ListResponse>* User::Stub::PrepareAsyncListByScoreRaw(::grpc::ClientContext* context, const ::user::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::ListResponse, ::user::ListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListByScore_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::ListResponse>* User::Stub::AsyncListByScoreRaw(::grpc::ClientContext* context, const ::user::ListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListByScoreRaw(context, request, cq);
  result->StartCall();
  return result;
}

User::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::CreateUserRequest, ::user::CreateUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::CreateUserRequest* req,
             ::user::CreateUserResponse* resp) {
               return service->CreateUsuario(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::ScoreRequest, ::user::ScoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::ScoreRequest* req,
             ::user::ScoreResponse* resp) {
               return service->UpdateScore(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::LoginRequest, ::user::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::LoginRequest* req,
             ::user::LoginResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::ListRequest, ::user::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::ListRequest* req,
             ::user::ListResponse* resp) {
               return service->ListByScore(ctx, req, resp);
             }, this)));
}

User::Service::~Service() {
}

::grpc::Status User::Service::CreateUsuario(::grpc::ServerContext* context, const ::user::CreateUserRequest* request, ::user::CreateUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::UpdateScore(::grpc::ServerContext* context, const ::user::ScoreRequest* request, ::user::ScoreResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Login(::grpc::ServerContext* context, const ::user::LoginRequest* request, ::user::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ListByScore(::grpc::ServerContext* context, const ::user::ListRequest* request, ::user::ListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace user

