// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: quiz.proto
#ifndef GRPC_quiz_2eproto__INCLUDED
#define GRPC_quiz_2eproto__INCLUDED

#include "quiz.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace quiz {

class Quiz final {
 public:
  static constexpr char const* service_full_name() {
    return "quiz.Quiz";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetPerguntas(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest& request, ::quiz::GetPerguntasResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quiz::GetPerguntasResponse>> AsyncGetPerguntas(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quiz::GetPerguntasResponse>>(AsyncGetPerguntasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quiz::GetPerguntasResponse>> PrepareAsyncGetPerguntas(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quiz::GetPerguntasResponse>>(PrepareAsyncGetPerguntasRaw(context, request, cq));
    }
    virtual ::grpc::Status CreatePergunta(::grpc::ClientContext* context, const ::quiz::CreateRequest& request, ::quiz::CreateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quiz::CreateResponse>> AsyncCreatePergunta(::grpc::ClientContext* context, const ::quiz::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quiz::CreateResponse>>(AsyncCreatePerguntaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quiz::CreateResponse>> PrepareAsyncCreatePergunta(::grpc::ClientContext* context, const ::quiz::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quiz::CreateResponse>>(PrepareAsyncCreatePerguntaRaw(context, request, cq));
    }
    virtual ::grpc::Status DeletePergunta(::grpc::ClientContext* context, const ::quiz::PerguntaId& request, ::quiz::StatusRetorno* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quiz::StatusRetorno>> AsyncDeletePergunta(::grpc::ClientContext* context, const ::quiz::PerguntaId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quiz::StatusRetorno>>(AsyncDeletePerguntaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quiz::StatusRetorno>> PrepareAsyncDeletePergunta(::grpc::ClientContext* context, const ::quiz::PerguntaId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quiz::StatusRetorno>>(PrepareAsyncDeletePerguntaRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetPerguntas(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest* request, ::quiz::GetPerguntasResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPerguntas(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest* request, ::quiz::GetPerguntasResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreatePergunta(::grpc::ClientContext* context, const ::quiz::CreateRequest* request, ::quiz::CreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreatePergunta(::grpc::ClientContext* context, const ::quiz::CreateRequest* request, ::quiz::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeletePergunta(::grpc::ClientContext* context, const ::quiz::PerguntaId* request, ::quiz::StatusRetorno* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePergunta(::grpc::ClientContext* context, const ::quiz::PerguntaId* request, ::quiz::StatusRetorno* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::quiz::GetPerguntasResponse>* AsyncGetPerguntasRaw(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::quiz::GetPerguntasResponse>* PrepareAsyncGetPerguntasRaw(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::quiz::CreateResponse>* AsyncCreatePerguntaRaw(::grpc::ClientContext* context, const ::quiz::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::quiz::CreateResponse>* PrepareAsyncCreatePerguntaRaw(::grpc::ClientContext* context, const ::quiz::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::quiz::StatusRetorno>* AsyncDeletePerguntaRaw(::grpc::ClientContext* context, const ::quiz::PerguntaId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::quiz::StatusRetorno>* PrepareAsyncDeletePerguntaRaw(::grpc::ClientContext* context, const ::quiz::PerguntaId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetPerguntas(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest& request, ::quiz::GetPerguntasResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quiz::GetPerguntasResponse>> AsyncGetPerguntas(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quiz::GetPerguntasResponse>>(AsyncGetPerguntasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quiz::GetPerguntasResponse>> PrepareAsyncGetPerguntas(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quiz::GetPerguntasResponse>>(PrepareAsyncGetPerguntasRaw(context, request, cq));
    }
    ::grpc::Status CreatePergunta(::grpc::ClientContext* context, const ::quiz::CreateRequest& request, ::quiz::CreateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quiz::CreateResponse>> AsyncCreatePergunta(::grpc::ClientContext* context, const ::quiz::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quiz::CreateResponse>>(AsyncCreatePerguntaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quiz::CreateResponse>> PrepareAsyncCreatePergunta(::grpc::ClientContext* context, const ::quiz::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quiz::CreateResponse>>(PrepareAsyncCreatePerguntaRaw(context, request, cq));
    }
    ::grpc::Status DeletePergunta(::grpc::ClientContext* context, const ::quiz::PerguntaId& request, ::quiz::StatusRetorno* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quiz::StatusRetorno>> AsyncDeletePergunta(::grpc::ClientContext* context, const ::quiz::PerguntaId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quiz::StatusRetorno>>(AsyncDeletePerguntaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quiz::StatusRetorno>> PrepareAsyncDeletePergunta(::grpc::ClientContext* context, const ::quiz::PerguntaId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quiz::StatusRetorno>>(PrepareAsyncDeletePerguntaRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetPerguntas(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest* request, ::quiz::GetPerguntasResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPerguntas(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest* request, ::quiz::GetPerguntasResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreatePergunta(::grpc::ClientContext* context, const ::quiz::CreateRequest* request, ::quiz::CreateResponse* response, std::function<void(::grpc::Status)>) override;
      void CreatePergunta(::grpc::ClientContext* context, const ::quiz::CreateRequest* request, ::quiz::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeletePergunta(::grpc::ClientContext* context, const ::quiz::PerguntaId* request, ::quiz::StatusRetorno* response, std::function<void(::grpc::Status)>) override;
      void DeletePergunta(::grpc::ClientContext* context, const ::quiz::PerguntaId* request, ::quiz::StatusRetorno* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::quiz::GetPerguntasResponse>* AsyncGetPerguntasRaw(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::quiz::GetPerguntasResponse>* PrepareAsyncGetPerguntasRaw(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::quiz::CreateResponse>* AsyncCreatePerguntaRaw(::grpc::ClientContext* context, const ::quiz::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::quiz::CreateResponse>* PrepareAsyncCreatePerguntaRaw(::grpc::ClientContext* context, const ::quiz::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::quiz::StatusRetorno>* AsyncDeletePerguntaRaw(::grpc::ClientContext* context, const ::quiz::PerguntaId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::quiz::StatusRetorno>* PrepareAsyncDeletePerguntaRaw(::grpc::ClientContext* context, const ::quiz::PerguntaId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetPerguntas_;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePergunta_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePergunta_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetPerguntas(::grpc::ServerContext* context, const ::quiz::GetPerguntasRequest* request, ::quiz::GetPerguntasResponse* response);
    virtual ::grpc::Status CreatePergunta(::grpc::ServerContext* context, const ::quiz::CreateRequest* request, ::quiz::CreateResponse* response);
    virtual ::grpc::Status DeletePergunta(::grpc::ServerContext* context, const ::quiz::PerguntaId* request, ::quiz::StatusRetorno* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPerguntas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPerguntas() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetPerguntas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPerguntas(::grpc::ServerContext* /*context*/, const ::quiz::GetPerguntasRequest* /*request*/, ::quiz::GetPerguntasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPerguntas(::grpc::ServerContext* context, ::quiz::GetPerguntasRequest* request, ::grpc::ServerAsyncResponseWriter< ::quiz::GetPerguntasResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePergunta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatePergunta() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreatePergunta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePergunta(::grpc::ServerContext* /*context*/, const ::quiz::CreateRequest* /*request*/, ::quiz::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePergunta(::grpc::ServerContext* context, ::quiz::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::quiz::CreateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePergunta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePergunta() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeletePergunta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePergunta(::grpc::ServerContext* /*context*/, const ::quiz::PerguntaId* /*request*/, ::quiz::StatusRetorno* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePergunta(::grpc::ServerContext* context, ::quiz::PerguntaId* request, ::grpc::ServerAsyncResponseWriter< ::quiz::StatusRetorno>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetPerguntas<WithAsyncMethod_CreatePergunta<WithAsyncMethod_DeletePergunta<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetPerguntas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPerguntas() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::quiz::GetPerguntasRequest, ::quiz::GetPerguntasResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::quiz::GetPerguntasRequest* request, ::quiz::GetPerguntasResponse* response) { return this->GetPerguntas(context, request, response); }));}
    void SetMessageAllocatorFor_GetPerguntas(
        ::grpc::MessageAllocator< ::quiz::GetPerguntasRequest, ::quiz::GetPerguntasResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::quiz::GetPerguntasRequest, ::quiz::GetPerguntasResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPerguntas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPerguntas(::grpc::ServerContext* /*context*/, const ::quiz::GetPerguntasRequest* /*request*/, ::quiz::GetPerguntasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPerguntas(
      ::grpc::CallbackServerContext* /*context*/, const ::quiz::GetPerguntasRequest* /*request*/, ::quiz::GetPerguntasResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreatePergunta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreatePergunta() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::quiz::CreateRequest, ::quiz::CreateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::quiz::CreateRequest* request, ::quiz::CreateResponse* response) { return this->CreatePergunta(context, request, response); }));}
    void SetMessageAllocatorFor_CreatePergunta(
        ::grpc::MessageAllocator< ::quiz::CreateRequest, ::quiz::CreateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::quiz::CreateRequest, ::quiz::CreateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreatePergunta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePergunta(::grpc::ServerContext* /*context*/, const ::quiz::CreateRequest* /*request*/, ::quiz::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePergunta(
      ::grpc::CallbackServerContext* /*context*/, const ::quiz::CreateRequest* /*request*/, ::quiz::CreateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeletePergunta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeletePergunta() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::quiz::PerguntaId, ::quiz::StatusRetorno>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::quiz::PerguntaId* request, ::quiz::StatusRetorno* response) { return this->DeletePergunta(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePergunta(
        ::grpc::MessageAllocator< ::quiz::PerguntaId, ::quiz::StatusRetorno>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::quiz::PerguntaId, ::quiz::StatusRetorno>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeletePergunta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePergunta(::grpc::ServerContext* /*context*/, const ::quiz::PerguntaId* /*request*/, ::quiz::StatusRetorno* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePergunta(
      ::grpc::CallbackServerContext* /*context*/, const ::quiz::PerguntaId* /*request*/, ::quiz::StatusRetorno* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetPerguntas<WithCallbackMethod_CreatePergunta<WithCallbackMethod_DeletePergunta<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetPerguntas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPerguntas() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetPerguntas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPerguntas(::grpc::ServerContext* /*context*/, const ::quiz::GetPerguntasRequest* /*request*/, ::quiz::GetPerguntasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreatePergunta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatePergunta() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreatePergunta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePergunta(::grpc::ServerContext* /*context*/, const ::quiz::CreateRequest* /*request*/, ::quiz::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePergunta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePergunta() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeletePergunta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePergunta(::grpc::ServerContext* /*context*/, const ::quiz::PerguntaId* /*request*/, ::quiz::StatusRetorno* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPerguntas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPerguntas() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetPerguntas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPerguntas(::grpc::ServerContext* /*context*/, const ::quiz::GetPerguntasRequest* /*request*/, ::quiz::GetPerguntasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPerguntas(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePergunta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatePergunta() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreatePergunta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePergunta(::grpc::ServerContext* /*context*/, const ::quiz::CreateRequest* /*request*/, ::quiz::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePergunta(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePergunta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePergunta() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeletePergunta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePergunta(::grpc::ServerContext* /*context*/, const ::quiz::PerguntaId* /*request*/, ::quiz::StatusRetorno* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePergunta(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPerguntas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPerguntas() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPerguntas(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPerguntas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPerguntas(::grpc::ServerContext* /*context*/, const ::quiz::GetPerguntasRequest* /*request*/, ::quiz::GetPerguntasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPerguntas(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreatePergunta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreatePergunta() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreatePergunta(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreatePergunta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePergunta(::grpc::ServerContext* /*context*/, const ::quiz::CreateRequest* /*request*/, ::quiz::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePergunta(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeletePergunta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeletePergunta() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePergunta(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeletePergunta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePergunta(::grpc::ServerContext* /*context*/, const ::quiz::PerguntaId* /*request*/, ::quiz::StatusRetorno* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePergunta(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPerguntas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPerguntas() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::quiz::GetPerguntasRequest, ::quiz::GetPerguntasResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::quiz::GetPerguntasRequest, ::quiz::GetPerguntasResponse>* streamer) {
                       return this->StreamedGetPerguntas(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPerguntas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPerguntas(::grpc::ServerContext* /*context*/, const ::quiz::GetPerguntasRequest* /*request*/, ::quiz::GetPerguntasResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPerguntas(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::quiz::GetPerguntasRequest,::quiz::GetPerguntasResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePergunta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreatePergunta() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::quiz::CreateRequest, ::quiz::CreateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::quiz::CreateRequest, ::quiz::CreateResponse>* streamer) {
                       return this->StreamedCreatePergunta(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreatePergunta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePergunta(::grpc::ServerContext* /*context*/, const ::quiz::CreateRequest* /*request*/, ::quiz::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePergunta(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::quiz::CreateRequest,::quiz::CreateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePergunta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePergunta() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::quiz::PerguntaId, ::quiz::StatusRetorno>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::quiz::PerguntaId, ::quiz::StatusRetorno>* streamer) {
                       return this->StreamedDeletePergunta(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePergunta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePergunta(::grpc::ServerContext* /*context*/, const ::quiz::PerguntaId* /*request*/, ::quiz::StatusRetorno* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePergunta(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::quiz::PerguntaId,::quiz::StatusRetorno>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetPerguntas<WithStreamedUnaryMethod_CreatePergunta<WithStreamedUnaryMethod_DeletePergunta<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetPerguntas<WithStreamedUnaryMethod_CreatePergunta<WithStreamedUnaryMethod_DeletePergunta<Service > > > StreamedService;
};

}  // namespace quiz


#endif  // GRPC_quiz_2eproto__INCLUDED
