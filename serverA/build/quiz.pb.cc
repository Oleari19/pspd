// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quiz.proto

#include "quiz.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace quiz {
constexpr PerguntaId::PerguntaId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dbid_(0){}
struct PerguntaIdDefaultTypeInternal {
  constexpr PerguntaIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PerguntaIdDefaultTypeInternal() {}
  union {
    PerguntaId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PerguntaIdDefaultTypeInternal _PerguntaId_default_instance_;
constexpr StatusRetorno::StatusRetorno(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : statusret_(0){}
struct StatusRetornoDefaultTypeInternal {
  constexpr StatusRetornoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusRetornoDefaultTypeInternal() {}
  union {
    StatusRetorno _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusRetornoDefaultTypeInternal _StatusRetorno_default_instance_;
constexpr Pergunta::Pergunta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alternativas_()
  , texto_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , explicacao_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , indice_resposta_(0){}
struct PerguntaDefaultTypeInternal {
  constexpr PerguntaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PerguntaDefaultTypeInternal() {}
  union {
    Pergunta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PerguntaDefaultTypeInternal _Pergunta_default_instance_;
constexpr GetPerguntasRequest::GetPerguntasRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetPerguntasRequestDefaultTypeInternal {
  constexpr GetPerguntasRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPerguntasRequestDefaultTypeInternal() {}
  union {
    GetPerguntasRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPerguntasRequestDefaultTypeInternal _GetPerguntasRequest_default_instance_;
constexpr GetPerguntasResponse::GetPerguntasResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : perguntas_(){}
struct GetPerguntasResponseDefaultTypeInternal {
  constexpr GetPerguntasResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPerguntasResponseDefaultTypeInternal() {}
  union {
    GetPerguntasResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPerguntasResponseDefaultTypeInternal _GetPerguntasResponse_default_instance_;
constexpr CreateRequest::CreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pergunta_criar_(){}
struct CreateRequestDefaultTypeInternal {
  constexpr CreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRequestDefaultTypeInternal() {}
  union {
    CreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
constexpr CreateResponse::CreateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pergunta_criada_(){}
struct CreateResponseDefaultTypeInternal {
  constexpr CreateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateResponseDefaultTypeInternal() {}
  union {
    CreateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
}  // namespace quiz
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_quiz_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_quiz_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_quiz_2eproto = nullptr;

const uint32_t TableStruct_quiz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::quiz::PerguntaId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::quiz::PerguntaId, dbid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::quiz::StatusRetorno, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::quiz::StatusRetorno, statusret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::quiz::Pergunta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::quiz::Pergunta, id_),
  PROTOBUF_FIELD_OFFSET(::quiz::Pergunta, texto_),
  PROTOBUF_FIELD_OFFSET(::quiz::Pergunta, alternativas_),
  PROTOBUF_FIELD_OFFSET(::quiz::Pergunta, indice_resposta_),
  PROTOBUF_FIELD_OFFSET(::quiz::Pergunta, explicacao_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::quiz::GetPerguntasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::quiz::GetPerguntasResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::quiz::GetPerguntasResponse, perguntas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::quiz::CreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::quiz::CreateRequest, pergunta_criar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::quiz::CreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::quiz::CreateResponse, pergunta_criada_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::quiz::PerguntaId)},
  { 7, -1, -1, sizeof(::quiz::StatusRetorno)},
  { 14, -1, -1, sizeof(::quiz::Pergunta)},
  { 25, -1, -1, sizeof(::quiz::GetPerguntasRequest)},
  { 31, -1, -1, sizeof(::quiz::GetPerguntasResponse)},
  { 38, -1, -1, sizeof(::quiz::CreateRequest)},
  { 45, -1, -1, sizeof(::quiz::CreateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_PerguntaId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_StatusRetorno_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_Pergunta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_GetPerguntasRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_GetPerguntasResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_CreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_CreateResponse_default_instance_),
};

const char descriptor_table_protodef_quiz_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nquiz.proto\022\004quiz\"\032\n\nPerguntaId\022\014\n\004dbid"
  "\030\001 \001(\005\"\"\n\rStatusRetorno\022\021\n\tstatusRet\030\001 \001"
  "(\005\"h\n\010Pergunta\022\n\n\002id\030\001 \001(\005\022\r\n\005texto\030\002 \001("
  "\t\022\024\n\014alternativas\030\003 \003(\t\022\027\n\017indice_respos"
  "ta\030\004 \001(\005\022\022\n\nexplicacao\030\005 \001(\t\"\025\n\023GetPergu"
  "ntasRequest\"9\n\024GetPerguntasResponse\022!\n\tp"
  "erguntas\030\001 \003(\0132\016.quiz.Pergunta\"7\n\rCreate"
  "Request\022&\n\016pergunta_criar\030\001 \003(\0132\016.quiz.P"
  "ergunta\"9\n\016CreateResponse\022\'\n\017pergunta_cr"
  "iada\030\001 \003(\0132\016.quiz.Pergunta2\311\001\n\004Quiz\022G\n\014G"
  "etPerguntas\022\031.quiz.GetPerguntasRequest\032\032"
  ".quiz.GetPerguntasResponse\"\000\022=\n\016CreatePe"
  "rgunta\022\023.quiz.CreateRequest\032\024.quiz.Creat"
  "eResponse\"\000\0229\n\016DeletePergunta\022\020.quiz.Per"
  "guntaId\032\023.quiz.StatusRetorno\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_quiz_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_quiz_2eproto = {
  false, false, 598, descriptor_table_protodef_quiz_2eproto, "quiz.proto", 
  &descriptor_table_quiz_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_quiz_2eproto::offsets,
  file_level_metadata_quiz_2eproto, file_level_enum_descriptors_quiz_2eproto, file_level_service_descriptors_quiz_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_quiz_2eproto_getter() {
  return &descriptor_table_quiz_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_quiz_2eproto(&descriptor_table_quiz_2eproto);
namespace quiz {

// ===================================================================

class PerguntaId::_Internal {
 public:
};

PerguntaId::PerguntaId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:quiz.PerguntaId)
}
PerguntaId::PerguntaId(const PerguntaId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dbid_ = from.dbid_;
  // @@protoc_insertion_point(copy_constructor:quiz.PerguntaId)
}

inline void PerguntaId::SharedCtor() {
dbid_ = 0;
}

PerguntaId::~PerguntaId() {
  // @@protoc_insertion_point(destructor:quiz.PerguntaId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PerguntaId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerguntaId::ArenaDtor(void* object) {
  PerguntaId* _this = reinterpret_cast< PerguntaId* >(object);
  (void)_this;
}
void PerguntaId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerguntaId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerguntaId::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.PerguntaId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dbid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerguntaId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 dbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          dbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerguntaId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.PerguntaId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dbid = 1;
  if (this->_internal_dbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dbid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.PerguntaId)
  return target;
}

size_t PerguntaId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.PerguntaId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 dbid = 1;
  if (this->_internal_dbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dbid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerguntaId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerguntaId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerguntaId::GetClassData() const { return &_class_data_; }

void PerguntaId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PerguntaId *>(to)->MergeFrom(
      static_cast<const PerguntaId &>(from));
}


void PerguntaId::MergeFrom(const PerguntaId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.PerguntaId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dbid() != 0) {
    _internal_set_dbid(from._internal_dbid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerguntaId::CopyFrom(const PerguntaId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.PerguntaId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerguntaId::IsInitialized() const {
  return true;
}

void PerguntaId::InternalSwap(PerguntaId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(dbid_, other->dbid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerguntaId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_quiz_2eproto_getter, &descriptor_table_quiz_2eproto_once,
      file_level_metadata_quiz_2eproto[0]);
}

// ===================================================================

class StatusRetorno::_Internal {
 public:
};

StatusRetorno::StatusRetorno(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:quiz.StatusRetorno)
}
StatusRetorno::StatusRetorno(const StatusRetorno& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  statusret_ = from.statusret_;
  // @@protoc_insertion_point(copy_constructor:quiz.StatusRetorno)
}

inline void StatusRetorno::SharedCtor() {
statusret_ = 0;
}

StatusRetorno::~StatusRetorno() {
  // @@protoc_insertion_point(destructor:quiz.StatusRetorno)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatusRetorno::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatusRetorno::ArenaDtor(void* object) {
  StatusRetorno* _this = reinterpret_cast< StatusRetorno* >(object);
  (void)_this;
}
void StatusRetorno::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusRetorno::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusRetorno::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.StatusRetorno)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statusret_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusRetorno::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 statusRet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          statusret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusRetorno::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.StatusRetorno)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 statusRet = 1;
  if (this->_internal_statusret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_statusret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.StatusRetorno)
  return target;
}

size_t StatusRetorno::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.StatusRetorno)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 statusRet = 1;
  if (this->_internal_statusret() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_statusret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusRetorno::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatusRetorno::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusRetorno::GetClassData() const { return &_class_data_; }

void StatusRetorno::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatusRetorno *>(to)->MergeFrom(
      static_cast<const StatusRetorno &>(from));
}


void StatusRetorno::MergeFrom(const StatusRetorno& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.StatusRetorno)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_statusret() != 0) {
    _internal_set_statusret(from._internal_statusret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusRetorno::CopyFrom(const StatusRetorno& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.StatusRetorno)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRetorno::IsInitialized() const {
  return true;
}

void StatusRetorno::InternalSwap(StatusRetorno* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(statusret_, other->statusret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusRetorno::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_quiz_2eproto_getter, &descriptor_table_quiz_2eproto_once,
      file_level_metadata_quiz_2eproto[1]);
}

// ===================================================================

class Pergunta::_Internal {
 public:
};

Pergunta::Pergunta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  alternativas_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:quiz.Pergunta)
}
Pergunta::Pergunta(const Pergunta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alternativas_(from.alternativas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  texto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    texto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_texto().empty()) {
    texto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_texto(), 
      GetArenaForAllocation());
  }
  explicacao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    explicacao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_explicacao().empty()) {
    explicacao_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_explicacao(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&indice_resposta_) -
    reinterpret_cast<char*>(&id_)) + sizeof(indice_resposta_));
  // @@protoc_insertion_point(copy_constructor:quiz.Pergunta)
}

inline void Pergunta::SharedCtor() {
texto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  texto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
explicacao_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  explicacao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&indice_resposta_) -
    reinterpret_cast<char*>(&id_)) + sizeof(indice_resposta_));
}

Pergunta::~Pergunta() {
  // @@protoc_insertion_point(destructor:quiz.Pergunta)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pergunta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  texto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  explicacao_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pergunta::ArenaDtor(void* object) {
  Pergunta* _this = reinterpret_cast< Pergunta* >(object);
  (void)_this;
}
void Pergunta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pergunta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pergunta::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.Pergunta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternativas_.Clear();
  texto_.ClearToEmpty();
  explicacao_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indice_resposta_) -
      reinterpret_cast<char*>(&id_)) + sizeof(indice_resposta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pergunta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string texto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_texto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quiz.Pergunta.texto"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string alternativas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_alternativas();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quiz.Pergunta.alternativas"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 indice_resposta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          indice_resposta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string explicacao = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_explicacao();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quiz.Pergunta.explicacao"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pergunta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.Pergunta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string texto = 2;
  if (!this->_internal_texto().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_texto().data(), static_cast<int>(this->_internal_texto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "quiz.Pergunta.texto");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_texto(), target);
  }

  // repeated string alternativas = 3;
  for (int i = 0, n = this->_internal_alternativas_size(); i < n; i++) {
    const auto& s = this->_internal_alternativas(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "quiz.Pergunta.alternativas");
    target = stream->WriteString(3, s, target);
  }

  // int32 indice_resposta = 4;
  if (this->_internal_indice_resposta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_indice_resposta(), target);
  }

  // string explicacao = 5;
  if (!this->_internal_explicacao().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_explicacao().data(), static_cast<int>(this->_internal_explicacao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "quiz.Pergunta.explicacao");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_explicacao(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.Pergunta)
  return target;
}

size_t Pergunta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.Pergunta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string alternativas = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(alternativas_.size());
  for (int i = 0, n = alternativas_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      alternativas_.Get(i));
  }

  // string texto = 2;
  if (!this->_internal_texto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_texto());
  }

  // string explicacao = 5;
  if (!this->_internal_explicacao().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_explicacao());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 indice_resposta = 4;
  if (this->_internal_indice_resposta() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_indice_resposta());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pergunta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pergunta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pergunta::GetClassData() const { return &_class_data_; }

void Pergunta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pergunta *>(to)->MergeFrom(
      static_cast<const Pergunta &>(from));
}


void Pergunta::MergeFrom(const Pergunta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.Pergunta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  alternativas_.MergeFrom(from.alternativas_);
  if (!from._internal_texto().empty()) {
    _internal_set_texto(from._internal_texto());
  }
  if (!from._internal_explicacao().empty()) {
    _internal_set_explicacao(from._internal_explicacao());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_indice_resposta() != 0) {
    _internal_set_indice_resposta(from._internal_indice_resposta());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pergunta::CopyFrom(const Pergunta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.Pergunta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pergunta::IsInitialized() const {
  return true;
}

void Pergunta::InternalSwap(Pergunta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  alternativas_.InternalSwap(&other->alternativas_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &texto_, lhs_arena,
      &other->texto_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &explicacao_, lhs_arena,
      &other->explicacao_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pergunta, indice_resposta_)
      + sizeof(Pergunta::indice_resposta_)
      - PROTOBUF_FIELD_OFFSET(Pergunta, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pergunta::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_quiz_2eproto_getter, &descriptor_table_quiz_2eproto_once,
      file_level_metadata_quiz_2eproto[2]);
}

// ===================================================================

class GetPerguntasRequest::_Internal {
 public:
};

GetPerguntasRequest::GetPerguntasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:quiz.GetPerguntasRequest)
}
GetPerguntasRequest::GetPerguntasRequest(const GetPerguntasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quiz.GetPerguntasRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPerguntasRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPerguntasRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetPerguntasRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_quiz_2eproto_getter, &descriptor_table_quiz_2eproto_once,
      file_level_metadata_quiz_2eproto[3]);
}

// ===================================================================

class GetPerguntasResponse::_Internal {
 public:
};

GetPerguntasResponse::GetPerguntasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  perguntas_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:quiz.GetPerguntasResponse)
}
GetPerguntasResponse::GetPerguntasResponse(const GetPerguntasResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      perguntas_(from.perguntas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quiz.GetPerguntasResponse)
}

inline void GetPerguntasResponse::SharedCtor() {
}

GetPerguntasResponse::~GetPerguntasResponse() {
  // @@protoc_insertion_point(destructor:quiz.GetPerguntasResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPerguntasResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetPerguntasResponse::ArenaDtor(void* object) {
  GetPerguntasResponse* _this = reinterpret_cast< GetPerguntasResponse* >(object);
  (void)_this;
}
void GetPerguntasResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPerguntasResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPerguntasResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.GetPerguntasResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perguntas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPerguntasResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .quiz.Pergunta perguntas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perguntas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPerguntasResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.GetPerguntasResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .quiz.Pergunta perguntas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_perguntas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_perguntas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.GetPerguntasResponse)
  return target;
}

size_t GetPerguntasResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.GetPerguntasResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quiz.Pergunta perguntas = 1;
  total_size += 1UL * this->_internal_perguntas_size();
  for (const auto& msg : this->perguntas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPerguntasResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPerguntasResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPerguntasResponse::GetClassData() const { return &_class_data_; }

void GetPerguntasResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPerguntasResponse *>(to)->MergeFrom(
      static_cast<const GetPerguntasResponse &>(from));
}


void GetPerguntasResponse::MergeFrom(const GetPerguntasResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.GetPerguntasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  perguntas_.MergeFrom(from.perguntas_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPerguntasResponse::CopyFrom(const GetPerguntasResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.GetPerguntasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPerguntasResponse::IsInitialized() const {
  return true;
}

void GetPerguntasResponse::InternalSwap(GetPerguntasResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  perguntas_.InternalSwap(&other->perguntas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPerguntasResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_quiz_2eproto_getter, &descriptor_table_quiz_2eproto_once,
      file_level_metadata_quiz_2eproto[4]);
}

// ===================================================================

class CreateRequest::_Internal {
 public:
};

CreateRequest::CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pergunta_criar_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:quiz.CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pergunta_criar_(from.pergunta_criar_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quiz.CreateRequest)
}

inline void CreateRequest::SharedCtor() {
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:quiz.CreateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateRequest::ArenaDtor(void* object) {
  CreateRequest* _this = reinterpret_cast< CreateRequest* >(object);
  (void)_this;
}
void CreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.CreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pergunta_criar_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .quiz.Pergunta pergunta_criar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pergunta_criar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.CreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .quiz.Pergunta pergunta_criar = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pergunta_criar_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pergunta_criar(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.CreateRequest)
  return target;
}

size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.CreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quiz.Pergunta pergunta_criar = 1;
  total_size += 1UL * this->_internal_pergunta_criar_size();
  for (const auto& msg : this->pergunta_criar_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRequest::GetClassData() const { return &_class_data_; }

void CreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateRequest *>(to)->MergeFrom(
      static_cast<const CreateRequest &>(from));
}


void CreateRequest::MergeFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pergunta_criar_.MergeFrom(from.pergunta_criar_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pergunta_criar_.InternalSwap(&other->pergunta_criar_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_quiz_2eproto_getter, &descriptor_table_quiz_2eproto_once,
      file_level_metadata_quiz_2eproto[5]);
}

// ===================================================================

class CreateResponse::_Internal {
 public:
};

CreateResponse::CreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pergunta_criada_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:quiz.CreateResponse)
}
CreateResponse::CreateResponse(const CreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pergunta_criada_(from.pergunta_criada_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quiz.CreateResponse)
}

inline void CreateResponse::SharedCtor() {
}

CreateResponse::~CreateResponse() {
  // @@protoc_insertion_point(destructor:quiz.CreateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateResponse::ArenaDtor(void* object) {
  CreateResponse* _this = reinterpret_cast< CreateResponse* >(object);
  (void)_this;
}
void CreateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.CreateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pergunta_criada_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .quiz.Pergunta pergunta_criada = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pergunta_criada(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.CreateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .quiz.Pergunta pergunta_criada = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pergunta_criada_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pergunta_criada(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.CreateResponse)
  return target;
}

size_t CreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.CreateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quiz.Pergunta pergunta_criada = 1;
  total_size += 1UL * this->_internal_pergunta_criada_size();
  for (const auto& msg : this->pergunta_criada_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateResponse::GetClassData() const { return &_class_data_; }

void CreateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateResponse *>(to)->MergeFrom(
      static_cast<const CreateResponse &>(from));
}


void CreateResponse::MergeFrom(const CreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.CreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pergunta_criada_.MergeFrom(from.pergunta_criada_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateResponse::CopyFrom(const CreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.CreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResponse::IsInitialized() const {
  return true;
}

void CreateResponse::InternalSwap(CreateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pergunta_criada_.InternalSwap(&other->pergunta_criada_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_quiz_2eproto_getter, &descriptor_table_quiz_2eproto_once,
      file_level_metadata_quiz_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace quiz
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::quiz::PerguntaId* Arena::CreateMaybeMessage< ::quiz::PerguntaId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::quiz::PerguntaId >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::StatusRetorno* Arena::CreateMaybeMessage< ::quiz::StatusRetorno >(Arena* arena) {
  return Arena::CreateMessageInternal< ::quiz::StatusRetorno >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::Pergunta* Arena::CreateMaybeMessage< ::quiz::Pergunta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::quiz::Pergunta >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::GetPerguntasRequest* Arena::CreateMaybeMessage< ::quiz::GetPerguntasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::quiz::GetPerguntasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::GetPerguntasResponse* Arena::CreateMaybeMessage< ::quiz::GetPerguntasResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::quiz::GetPerguntasResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::CreateRequest* Arena::CreateMaybeMessage< ::quiz::CreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::quiz::CreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::CreateResponse* Arena::CreateMaybeMessage< ::quiz::CreateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::quiz::CreateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
