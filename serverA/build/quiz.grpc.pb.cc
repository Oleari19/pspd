// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: quiz.proto

#include "quiz.pb.h"
#include "quiz.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace quiz {

static const char* Quiz_method_names[] = {
  "/quiz.Quiz/GetPerguntas",
  "/quiz.Quiz/CreatePergunta",
  "/quiz.Quiz/DeletePergunta",
};

std::unique_ptr< Quiz::Stub> Quiz::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Quiz::Stub> stub(new Quiz::Stub(channel, options));
  return stub;
}

Quiz::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetPerguntas_(Quiz_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePergunta_(Quiz_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePergunta_(Quiz_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Quiz::Stub::GetPerguntas(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest& request, ::quiz::GetPerguntasResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::quiz::GetPerguntasRequest, ::quiz::GetPerguntasResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPerguntas_, context, request, response);
}

void Quiz::Stub::async::GetPerguntas(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest* request, ::quiz::GetPerguntasResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::quiz::GetPerguntasRequest, ::quiz::GetPerguntasResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPerguntas_, context, request, response, std::move(f));
}

void Quiz::Stub::async::GetPerguntas(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest* request, ::quiz::GetPerguntasResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPerguntas_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::quiz::GetPerguntasResponse>* Quiz::Stub::PrepareAsyncGetPerguntasRaw(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::quiz::GetPerguntasResponse, ::quiz::GetPerguntasRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPerguntas_, context, request);
}

::grpc::ClientAsyncResponseReader< ::quiz::GetPerguntasResponse>* Quiz::Stub::AsyncGetPerguntasRaw(::grpc::ClientContext* context, const ::quiz::GetPerguntasRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPerguntasRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Quiz::Stub::CreatePergunta(::grpc::ClientContext* context, const ::quiz::CreateRequest& request, ::quiz::CreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::quiz::CreateRequest, ::quiz::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreatePergunta_, context, request, response);
}

void Quiz::Stub::async::CreatePergunta(::grpc::ClientContext* context, const ::quiz::CreateRequest* request, ::quiz::CreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::quiz::CreateRequest, ::quiz::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePergunta_, context, request, response, std::move(f));
}

void Quiz::Stub::async::CreatePergunta(::grpc::ClientContext* context, const ::quiz::CreateRequest* request, ::quiz::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePergunta_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::quiz::CreateResponse>* Quiz::Stub::PrepareAsyncCreatePerguntaRaw(::grpc::ClientContext* context, const ::quiz::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::quiz::CreateResponse, ::quiz::CreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreatePergunta_, context, request);
}

::grpc::ClientAsyncResponseReader< ::quiz::CreateResponse>* Quiz::Stub::AsyncCreatePerguntaRaw(::grpc::ClientContext* context, const ::quiz::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreatePerguntaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Quiz::Stub::DeletePergunta(::grpc::ClientContext* context, const ::quiz::PerguntaId& request, ::quiz::StatusRetorno* response) {
  return ::grpc::internal::BlockingUnaryCall< ::quiz::PerguntaId, ::quiz::StatusRetorno, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePergunta_, context, request, response);
}

void Quiz::Stub::async::DeletePergunta(::grpc::ClientContext* context, const ::quiz::PerguntaId* request, ::quiz::StatusRetorno* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::quiz::PerguntaId, ::quiz::StatusRetorno, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePergunta_, context, request, response, std::move(f));
}

void Quiz::Stub::async::DeletePergunta(::grpc::ClientContext* context, const ::quiz::PerguntaId* request, ::quiz::StatusRetorno* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePergunta_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::quiz::StatusRetorno>* Quiz::Stub::PrepareAsyncDeletePerguntaRaw(::grpc::ClientContext* context, const ::quiz::PerguntaId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::quiz::StatusRetorno, ::quiz::PerguntaId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePergunta_, context, request);
}

::grpc::ClientAsyncResponseReader< ::quiz::StatusRetorno>* Quiz::Stub::AsyncDeletePerguntaRaw(::grpc::ClientContext* context, const ::quiz::PerguntaId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePerguntaRaw(context, request, cq);
  result->StartCall();
  return result;
}

Quiz::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Quiz_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Quiz::Service, ::quiz::GetPerguntasRequest, ::quiz::GetPerguntasResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Quiz::Service* service,
             ::grpc::ServerContext* ctx,
             const ::quiz::GetPerguntasRequest* req,
             ::quiz::GetPerguntasResponse* resp) {
               return service->GetPerguntas(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Quiz_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Quiz::Service, ::quiz::CreateRequest, ::quiz::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Quiz::Service* service,
             ::grpc::ServerContext* ctx,
             const ::quiz::CreateRequest* req,
             ::quiz::CreateResponse* resp) {
               return service->CreatePergunta(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Quiz_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Quiz::Service, ::quiz::PerguntaId, ::quiz::StatusRetorno, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Quiz::Service* service,
             ::grpc::ServerContext* ctx,
             const ::quiz::PerguntaId* req,
             ::quiz::StatusRetorno* resp) {
               return service->DeletePergunta(ctx, req, resp);
             }, this)));
}

Quiz::Service::~Service() {
}

::grpc::Status Quiz::Service::GetPerguntas(::grpc::ServerContext* context, const ::quiz::GetPerguntasRequest* request, ::quiz::GetPerguntasResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Quiz::Service::CreatePergunta(::grpc::ServerContext* context, const ::quiz::CreateRequest* request, ::quiz::CreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Quiz::Service::DeletePergunta(::grpc::ServerContext* context, const ::quiz::PerguntaId* request, ::quiz::StatusRetorno* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace quiz

