// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quiz.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_quiz_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_quiz_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_quiz_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_quiz_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_quiz_2eproto;
namespace quiz {
class CreateRequest;
struct CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class CreateResponse;
struct CreateResponseDefaultTypeInternal;
extern CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
class GetPerguntasRequest;
struct GetPerguntasRequestDefaultTypeInternal;
extern GetPerguntasRequestDefaultTypeInternal _GetPerguntasRequest_default_instance_;
class GetPerguntasResponse;
struct GetPerguntasResponseDefaultTypeInternal;
extern GetPerguntasResponseDefaultTypeInternal _GetPerguntasResponse_default_instance_;
class Pergunta;
struct PerguntaDefaultTypeInternal;
extern PerguntaDefaultTypeInternal _Pergunta_default_instance_;
class PerguntaId;
struct PerguntaIdDefaultTypeInternal;
extern PerguntaIdDefaultTypeInternal _PerguntaId_default_instance_;
class StatusRetorno;
struct StatusRetornoDefaultTypeInternal;
extern StatusRetornoDefaultTypeInternal _StatusRetorno_default_instance_;
}  // namespace quiz
PROTOBUF_NAMESPACE_OPEN
template<> ::quiz::CreateRequest* Arena::CreateMaybeMessage<::quiz::CreateRequest>(Arena*);
template<> ::quiz::CreateResponse* Arena::CreateMaybeMessage<::quiz::CreateResponse>(Arena*);
template<> ::quiz::GetPerguntasRequest* Arena::CreateMaybeMessage<::quiz::GetPerguntasRequest>(Arena*);
template<> ::quiz::GetPerguntasResponse* Arena::CreateMaybeMessage<::quiz::GetPerguntasResponse>(Arena*);
template<> ::quiz::Pergunta* Arena::CreateMaybeMessage<::quiz::Pergunta>(Arena*);
template<> ::quiz::PerguntaId* Arena::CreateMaybeMessage<::quiz::PerguntaId>(Arena*);
template<> ::quiz::StatusRetorno* Arena::CreateMaybeMessage<::quiz::StatusRetorno>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace quiz {

// ===================================================================

class PerguntaId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:quiz.PerguntaId) */ {
 public:
  inline PerguntaId() : PerguntaId(nullptr) {}
  ~PerguntaId() override;
  explicit constexpr PerguntaId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerguntaId(const PerguntaId& from);
  PerguntaId(PerguntaId&& from) noexcept
    : PerguntaId() {
    *this = ::std::move(from);
  }

  inline PerguntaId& operator=(const PerguntaId& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerguntaId& operator=(PerguntaId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerguntaId& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerguntaId* internal_default_instance() {
    return reinterpret_cast<const PerguntaId*>(
               &_PerguntaId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerguntaId& a, PerguntaId& b) {
    a.Swap(&b);
  }
  inline void Swap(PerguntaId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerguntaId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerguntaId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerguntaId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerguntaId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PerguntaId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerguntaId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "quiz.PerguntaId";
  }
  protected:
  explicit PerguntaId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbidFieldNumber = 1,
  };
  // int32 dbid = 1;
  void clear_dbid();
  int32_t dbid() const;
  void set_dbid(int32_t value);
  private:
  int32_t _internal_dbid() const;
  void _internal_set_dbid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:quiz.PerguntaId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t dbid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_quiz_2eproto;
};
// -------------------------------------------------------------------

class StatusRetorno final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:quiz.StatusRetorno) */ {
 public:
  inline StatusRetorno() : StatusRetorno(nullptr) {}
  ~StatusRetorno() override;
  explicit constexpr StatusRetorno(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusRetorno(const StatusRetorno& from);
  StatusRetorno(StatusRetorno&& from) noexcept
    : StatusRetorno() {
    *this = ::std::move(from);
  }

  inline StatusRetorno& operator=(const StatusRetorno& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusRetorno& operator=(StatusRetorno&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusRetorno& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusRetorno* internal_default_instance() {
    return reinterpret_cast<const StatusRetorno*>(
               &_StatusRetorno_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StatusRetorno& a, StatusRetorno& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusRetorno* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusRetorno* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusRetorno* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusRetorno>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusRetorno& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusRetorno& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRetorno* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "quiz.StatusRetorno";
  }
  protected:
  explicit StatusRetorno(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusRetFieldNumber = 1,
  };
  // int32 statusRet = 1;
  void clear_statusret();
  int32_t statusret() const;
  void set_statusret(int32_t value);
  private:
  int32_t _internal_statusret() const;
  void _internal_set_statusret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:quiz.StatusRetorno)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t statusret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_quiz_2eproto;
};
// -------------------------------------------------------------------

class Pergunta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:quiz.Pergunta) */ {
 public:
  inline Pergunta() : Pergunta(nullptr) {}
  ~Pergunta() override;
  explicit constexpr Pergunta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pergunta(const Pergunta& from);
  Pergunta(Pergunta&& from) noexcept
    : Pergunta() {
    *this = ::std::move(from);
  }

  inline Pergunta& operator=(const Pergunta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pergunta& operator=(Pergunta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pergunta& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pergunta* internal_default_instance() {
    return reinterpret_cast<const Pergunta*>(
               &_Pergunta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pergunta& a, Pergunta& b) {
    a.Swap(&b);
  }
  inline void Swap(Pergunta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pergunta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pergunta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pergunta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pergunta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pergunta& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pergunta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "quiz.Pergunta";
  }
  protected:
  explicit Pergunta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlternativasFieldNumber = 3,
    kTextoFieldNumber = 2,
    kExplicacaoFieldNumber = 5,
    kIdFieldNumber = 1,
    kIndiceRespostaFieldNumber = 4,
  };
  // repeated string alternativas = 3;
  int alternativas_size() const;
  private:
  int _internal_alternativas_size() const;
  public:
  void clear_alternativas();
  const std::string& alternativas(int index) const;
  std::string* mutable_alternativas(int index);
  void set_alternativas(int index, const std::string& value);
  void set_alternativas(int index, std::string&& value);
  void set_alternativas(int index, const char* value);
  void set_alternativas(int index, const char* value, size_t size);
  std::string* add_alternativas();
  void add_alternativas(const std::string& value);
  void add_alternativas(std::string&& value);
  void add_alternativas(const char* value);
  void add_alternativas(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& alternativas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_alternativas();
  private:
  const std::string& _internal_alternativas(int index) const;
  std::string* _internal_add_alternativas();
  public:

  // string texto = 2;
  void clear_texto();
  const std::string& texto() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_texto(ArgT0&& arg0, ArgT... args);
  std::string* mutable_texto();
  PROTOBUF_NODISCARD std::string* release_texto();
  void set_allocated_texto(std::string* texto);
  private:
  const std::string& _internal_texto() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_texto(const std::string& value);
  std::string* _internal_mutable_texto();
  public:

  // string explicacao = 5;
  void clear_explicacao();
  const std::string& explicacao() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_explicacao(ArgT0&& arg0, ArgT... args);
  std::string* mutable_explicacao();
  PROTOBUF_NODISCARD std::string* release_explicacao();
  void set_allocated_explicacao(std::string* explicacao);
  private:
  const std::string& _internal_explicacao() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explicacao(const std::string& value);
  std::string* _internal_mutable_explicacao();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 indice_resposta = 4;
  void clear_indice_resposta();
  int32_t indice_resposta() const;
  void set_indice_resposta(int32_t value);
  private:
  int32_t _internal_indice_resposta() const;
  void _internal_set_indice_resposta(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:quiz.Pergunta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> alternativas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texto_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explicacao_;
  int32_t id_;
  int32_t indice_resposta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_quiz_2eproto;
};
// -------------------------------------------------------------------

class GetPerguntasRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:quiz.GetPerguntasRequest) */ {
 public:
  inline GetPerguntasRequest() : GetPerguntasRequest(nullptr) {}
  explicit constexpr GetPerguntasRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPerguntasRequest(const GetPerguntasRequest& from);
  GetPerguntasRequest(GetPerguntasRequest&& from) noexcept
    : GetPerguntasRequest() {
    *this = ::std::move(from);
  }

  inline GetPerguntasRequest& operator=(const GetPerguntasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPerguntasRequest& operator=(GetPerguntasRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPerguntasRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPerguntasRequest* internal_default_instance() {
    return reinterpret_cast<const GetPerguntasRequest*>(
               &_GetPerguntasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetPerguntasRequest& a, GetPerguntasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPerguntasRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPerguntasRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPerguntasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPerguntasRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetPerguntasRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetPerguntasRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "quiz.GetPerguntasRequest";
  }
  protected:
  explicit GetPerguntasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:quiz.GetPerguntasRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_quiz_2eproto;
};
// -------------------------------------------------------------------

class GetPerguntasResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:quiz.GetPerguntasResponse) */ {
 public:
  inline GetPerguntasResponse() : GetPerguntasResponse(nullptr) {}
  ~GetPerguntasResponse() override;
  explicit constexpr GetPerguntasResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPerguntasResponse(const GetPerguntasResponse& from);
  GetPerguntasResponse(GetPerguntasResponse&& from) noexcept
    : GetPerguntasResponse() {
    *this = ::std::move(from);
  }

  inline GetPerguntasResponse& operator=(const GetPerguntasResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPerguntasResponse& operator=(GetPerguntasResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPerguntasResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPerguntasResponse* internal_default_instance() {
    return reinterpret_cast<const GetPerguntasResponse*>(
               &_GetPerguntasResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetPerguntasResponse& a, GetPerguntasResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPerguntasResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPerguntasResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPerguntasResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPerguntasResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPerguntasResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPerguntasResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPerguntasResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "quiz.GetPerguntasResponse";
  }
  protected:
  explicit GetPerguntasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerguntasFieldNumber = 1,
  };
  // repeated .quiz.Pergunta perguntas = 1;
  int perguntas_size() const;
  private:
  int _internal_perguntas_size() const;
  public:
  void clear_perguntas();
  ::quiz::Pergunta* mutable_perguntas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta >*
      mutable_perguntas();
  private:
  const ::quiz::Pergunta& _internal_perguntas(int index) const;
  ::quiz::Pergunta* _internal_add_perguntas();
  public:
  const ::quiz::Pergunta& perguntas(int index) const;
  ::quiz::Pergunta* add_perguntas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta >&
      perguntas() const;

  // @@protoc_insertion_point(class_scope:quiz.GetPerguntasResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta > perguntas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_quiz_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:quiz.CreateRequest) */ {
 public:
  inline CreateRequest() : CreateRequest(nullptr) {}
  ~CreateRequest() override;
  explicit constexpr CreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRequest(const CreateRequest& from);
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "quiz.CreateRequest";
  }
  protected:
  explicit CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerguntaCriarFieldNumber = 1,
  };
  // repeated .quiz.Pergunta pergunta_criar = 1;
  int pergunta_criar_size() const;
  private:
  int _internal_pergunta_criar_size() const;
  public:
  void clear_pergunta_criar();
  ::quiz::Pergunta* mutable_pergunta_criar(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta >*
      mutable_pergunta_criar();
  private:
  const ::quiz::Pergunta& _internal_pergunta_criar(int index) const;
  ::quiz::Pergunta* _internal_add_pergunta_criar();
  public:
  const ::quiz::Pergunta& pergunta_criar(int index) const;
  ::quiz::Pergunta* add_pergunta_criar();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta >&
      pergunta_criar() const;

  // @@protoc_insertion_point(class_scope:quiz.CreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta > pergunta_criar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_quiz_2eproto;
};
// -------------------------------------------------------------------

class CreateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:quiz.CreateResponse) */ {
 public:
  inline CreateResponse() : CreateResponse(nullptr) {}
  ~CreateResponse() override;
  explicit constexpr CreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateResponse(const CreateResponse& from);
  CreateResponse(CreateResponse&& from) noexcept
    : CreateResponse() {
    *this = ::std::move(from);
  }

  inline CreateResponse& operator=(const CreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResponse& operator=(CreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateResponse* internal_default_instance() {
    return reinterpret_cast<const CreateResponse*>(
               &_CreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateResponse& a, CreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "quiz.CreateResponse";
  }
  protected:
  explicit CreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerguntaCriadaFieldNumber = 1,
  };
  // repeated .quiz.Pergunta pergunta_criada = 1;
  int pergunta_criada_size() const;
  private:
  int _internal_pergunta_criada_size() const;
  public:
  void clear_pergunta_criada();
  ::quiz::Pergunta* mutable_pergunta_criada(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta >*
      mutable_pergunta_criada();
  private:
  const ::quiz::Pergunta& _internal_pergunta_criada(int index) const;
  ::quiz::Pergunta* _internal_add_pergunta_criada();
  public:
  const ::quiz::Pergunta& pergunta_criada(int index) const;
  ::quiz::Pergunta* add_pergunta_criada();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta >&
      pergunta_criada() const;

  // @@protoc_insertion_point(class_scope:quiz.CreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta > pergunta_criada_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_quiz_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerguntaId

// int32 dbid = 1;
inline void PerguntaId::clear_dbid() {
  dbid_ = 0;
}
inline int32_t PerguntaId::_internal_dbid() const {
  return dbid_;
}
inline int32_t PerguntaId::dbid() const {
  // @@protoc_insertion_point(field_get:quiz.PerguntaId.dbid)
  return _internal_dbid();
}
inline void PerguntaId::_internal_set_dbid(int32_t value) {
  
  dbid_ = value;
}
inline void PerguntaId::set_dbid(int32_t value) {
  _internal_set_dbid(value);
  // @@protoc_insertion_point(field_set:quiz.PerguntaId.dbid)
}

// -------------------------------------------------------------------

// StatusRetorno

// int32 statusRet = 1;
inline void StatusRetorno::clear_statusret() {
  statusret_ = 0;
}
inline int32_t StatusRetorno::_internal_statusret() const {
  return statusret_;
}
inline int32_t StatusRetorno::statusret() const {
  // @@protoc_insertion_point(field_get:quiz.StatusRetorno.statusRet)
  return _internal_statusret();
}
inline void StatusRetorno::_internal_set_statusret(int32_t value) {
  
  statusret_ = value;
}
inline void StatusRetorno::set_statusret(int32_t value) {
  _internal_set_statusret(value);
  // @@protoc_insertion_point(field_set:quiz.StatusRetorno.statusRet)
}

// -------------------------------------------------------------------

// Pergunta

// int32 id = 1;
inline void Pergunta::clear_id() {
  id_ = 0;
}
inline int32_t Pergunta::_internal_id() const {
  return id_;
}
inline int32_t Pergunta::id() const {
  // @@protoc_insertion_point(field_get:quiz.Pergunta.id)
  return _internal_id();
}
inline void Pergunta::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void Pergunta::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:quiz.Pergunta.id)
}

// string texto = 2;
inline void Pergunta::clear_texto() {
  texto_.ClearToEmpty();
}
inline const std::string& Pergunta::texto() const {
  // @@protoc_insertion_point(field_get:quiz.Pergunta.texto)
  return _internal_texto();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pergunta::set_texto(ArgT0&& arg0, ArgT... args) {
 
 texto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:quiz.Pergunta.texto)
}
inline std::string* Pergunta::mutable_texto() {
  std::string* _s = _internal_mutable_texto();
  // @@protoc_insertion_point(field_mutable:quiz.Pergunta.texto)
  return _s;
}
inline const std::string& Pergunta::_internal_texto() const {
  return texto_.Get();
}
inline void Pergunta::_internal_set_texto(const std::string& value) {
  
  texto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pergunta::_internal_mutable_texto() {
  
  return texto_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pergunta::release_texto() {
  // @@protoc_insertion_point(field_release:quiz.Pergunta.texto)
  return texto_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pergunta::set_allocated_texto(std::string* texto) {
  if (texto != nullptr) {
    
  } else {
    
  }
  texto_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), texto,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (texto_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    texto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:quiz.Pergunta.texto)
}

// repeated string alternativas = 3;
inline int Pergunta::_internal_alternativas_size() const {
  return alternativas_.size();
}
inline int Pergunta::alternativas_size() const {
  return _internal_alternativas_size();
}
inline void Pergunta::clear_alternativas() {
  alternativas_.Clear();
}
inline std::string* Pergunta::add_alternativas() {
  std::string* _s = _internal_add_alternativas();
  // @@protoc_insertion_point(field_add_mutable:quiz.Pergunta.alternativas)
  return _s;
}
inline const std::string& Pergunta::_internal_alternativas(int index) const {
  return alternativas_.Get(index);
}
inline const std::string& Pergunta::alternativas(int index) const {
  // @@protoc_insertion_point(field_get:quiz.Pergunta.alternativas)
  return _internal_alternativas(index);
}
inline std::string* Pergunta::mutable_alternativas(int index) {
  // @@protoc_insertion_point(field_mutable:quiz.Pergunta.alternativas)
  return alternativas_.Mutable(index);
}
inline void Pergunta::set_alternativas(int index, const std::string& value) {
  alternativas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:quiz.Pergunta.alternativas)
}
inline void Pergunta::set_alternativas(int index, std::string&& value) {
  alternativas_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:quiz.Pergunta.alternativas)
}
inline void Pergunta::set_alternativas(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alternativas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:quiz.Pergunta.alternativas)
}
inline void Pergunta::set_alternativas(int index, const char* value, size_t size) {
  alternativas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:quiz.Pergunta.alternativas)
}
inline std::string* Pergunta::_internal_add_alternativas() {
  return alternativas_.Add();
}
inline void Pergunta::add_alternativas(const std::string& value) {
  alternativas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:quiz.Pergunta.alternativas)
}
inline void Pergunta::add_alternativas(std::string&& value) {
  alternativas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:quiz.Pergunta.alternativas)
}
inline void Pergunta::add_alternativas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alternativas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:quiz.Pergunta.alternativas)
}
inline void Pergunta::add_alternativas(const char* value, size_t size) {
  alternativas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:quiz.Pergunta.alternativas)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Pergunta::alternativas() const {
  // @@protoc_insertion_point(field_list:quiz.Pergunta.alternativas)
  return alternativas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Pergunta::mutable_alternativas() {
  // @@protoc_insertion_point(field_mutable_list:quiz.Pergunta.alternativas)
  return &alternativas_;
}

// int32 indice_resposta = 4;
inline void Pergunta::clear_indice_resposta() {
  indice_resposta_ = 0;
}
inline int32_t Pergunta::_internal_indice_resposta() const {
  return indice_resposta_;
}
inline int32_t Pergunta::indice_resposta() const {
  // @@protoc_insertion_point(field_get:quiz.Pergunta.indice_resposta)
  return _internal_indice_resposta();
}
inline void Pergunta::_internal_set_indice_resposta(int32_t value) {
  
  indice_resposta_ = value;
}
inline void Pergunta::set_indice_resposta(int32_t value) {
  _internal_set_indice_resposta(value);
  // @@protoc_insertion_point(field_set:quiz.Pergunta.indice_resposta)
}

// string explicacao = 5;
inline void Pergunta::clear_explicacao() {
  explicacao_.ClearToEmpty();
}
inline const std::string& Pergunta::explicacao() const {
  // @@protoc_insertion_point(field_get:quiz.Pergunta.explicacao)
  return _internal_explicacao();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pergunta::set_explicacao(ArgT0&& arg0, ArgT... args) {
 
 explicacao_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:quiz.Pergunta.explicacao)
}
inline std::string* Pergunta::mutable_explicacao() {
  std::string* _s = _internal_mutable_explicacao();
  // @@protoc_insertion_point(field_mutable:quiz.Pergunta.explicacao)
  return _s;
}
inline const std::string& Pergunta::_internal_explicacao() const {
  return explicacao_.Get();
}
inline void Pergunta::_internal_set_explicacao(const std::string& value) {
  
  explicacao_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pergunta::_internal_mutable_explicacao() {
  
  return explicacao_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pergunta::release_explicacao() {
  // @@protoc_insertion_point(field_release:quiz.Pergunta.explicacao)
  return explicacao_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pergunta::set_allocated_explicacao(std::string* explicacao) {
  if (explicacao != nullptr) {
    
  } else {
    
  }
  explicacao_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explicacao,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (explicacao_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    explicacao_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:quiz.Pergunta.explicacao)
}

// -------------------------------------------------------------------

// GetPerguntasRequest

// -------------------------------------------------------------------

// GetPerguntasResponse

// repeated .quiz.Pergunta perguntas = 1;
inline int GetPerguntasResponse::_internal_perguntas_size() const {
  return perguntas_.size();
}
inline int GetPerguntasResponse::perguntas_size() const {
  return _internal_perguntas_size();
}
inline void GetPerguntasResponse::clear_perguntas() {
  perguntas_.Clear();
}
inline ::quiz::Pergunta* GetPerguntasResponse::mutable_perguntas(int index) {
  // @@protoc_insertion_point(field_mutable:quiz.GetPerguntasResponse.perguntas)
  return perguntas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta >*
GetPerguntasResponse::mutable_perguntas() {
  // @@protoc_insertion_point(field_mutable_list:quiz.GetPerguntasResponse.perguntas)
  return &perguntas_;
}
inline const ::quiz::Pergunta& GetPerguntasResponse::_internal_perguntas(int index) const {
  return perguntas_.Get(index);
}
inline const ::quiz::Pergunta& GetPerguntasResponse::perguntas(int index) const {
  // @@protoc_insertion_point(field_get:quiz.GetPerguntasResponse.perguntas)
  return _internal_perguntas(index);
}
inline ::quiz::Pergunta* GetPerguntasResponse::_internal_add_perguntas() {
  return perguntas_.Add();
}
inline ::quiz::Pergunta* GetPerguntasResponse::add_perguntas() {
  ::quiz::Pergunta* _add = _internal_add_perguntas();
  // @@protoc_insertion_point(field_add:quiz.GetPerguntasResponse.perguntas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta >&
GetPerguntasResponse::perguntas() const {
  // @@protoc_insertion_point(field_list:quiz.GetPerguntasResponse.perguntas)
  return perguntas_;
}

// -------------------------------------------------------------------

// CreateRequest

// repeated .quiz.Pergunta pergunta_criar = 1;
inline int CreateRequest::_internal_pergunta_criar_size() const {
  return pergunta_criar_.size();
}
inline int CreateRequest::pergunta_criar_size() const {
  return _internal_pergunta_criar_size();
}
inline void CreateRequest::clear_pergunta_criar() {
  pergunta_criar_.Clear();
}
inline ::quiz::Pergunta* CreateRequest::mutable_pergunta_criar(int index) {
  // @@protoc_insertion_point(field_mutable:quiz.CreateRequest.pergunta_criar)
  return pergunta_criar_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta >*
CreateRequest::mutable_pergunta_criar() {
  // @@protoc_insertion_point(field_mutable_list:quiz.CreateRequest.pergunta_criar)
  return &pergunta_criar_;
}
inline const ::quiz::Pergunta& CreateRequest::_internal_pergunta_criar(int index) const {
  return pergunta_criar_.Get(index);
}
inline const ::quiz::Pergunta& CreateRequest::pergunta_criar(int index) const {
  // @@protoc_insertion_point(field_get:quiz.CreateRequest.pergunta_criar)
  return _internal_pergunta_criar(index);
}
inline ::quiz::Pergunta* CreateRequest::_internal_add_pergunta_criar() {
  return pergunta_criar_.Add();
}
inline ::quiz::Pergunta* CreateRequest::add_pergunta_criar() {
  ::quiz::Pergunta* _add = _internal_add_pergunta_criar();
  // @@protoc_insertion_point(field_add:quiz.CreateRequest.pergunta_criar)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta >&
CreateRequest::pergunta_criar() const {
  // @@protoc_insertion_point(field_list:quiz.CreateRequest.pergunta_criar)
  return pergunta_criar_;
}

// -------------------------------------------------------------------

// CreateResponse

// repeated .quiz.Pergunta pergunta_criada = 1;
inline int CreateResponse::_internal_pergunta_criada_size() const {
  return pergunta_criada_.size();
}
inline int CreateResponse::pergunta_criada_size() const {
  return _internal_pergunta_criada_size();
}
inline void CreateResponse::clear_pergunta_criada() {
  pergunta_criada_.Clear();
}
inline ::quiz::Pergunta* CreateResponse::mutable_pergunta_criada(int index) {
  // @@protoc_insertion_point(field_mutable:quiz.CreateResponse.pergunta_criada)
  return pergunta_criada_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta >*
CreateResponse::mutable_pergunta_criada() {
  // @@protoc_insertion_point(field_mutable_list:quiz.CreateResponse.pergunta_criada)
  return &pergunta_criada_;
}
inline const ::quiz::Pergunta& CreateResponse::_internal_pergunta_criada(int index) const {
  return pergunta_criada_.Get(index);
}
inline const ::quiz::Pergunta& CreateResponse::pergunta_criada(int index) const {
  // @@protoc_insertion_point(field_get:quiz.CreateResponse.pergunta_criada)
  return _internal_pergunta_criada(index);
}
inline ::quiz::Pergunta* CreateResponse::_internal_add_pergunta_criada() {
  return pergunta_criada_.Add();
}
inline ::quiz::Pergunta* CreateResponse::add_pergunta_criada() {
  ::quiz::Pergunta* _add = _internal_add_pergunta_criada();
  // @@protoc_insertion_point(field_add:quiz.CreateResponse.pergunta_criada)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quiz::Pergunta >&
CreateResponse::pergunta_criada() const {
  // @@protoc_insertion_point(field_list:quiz.CreateResponse.pergunta_criada)
  return pergunta_criada_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace quiz

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_quiz_2eproto
